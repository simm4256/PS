# 개요

### 용어

* Subsequence
  
    원 수열의 요소를 빼와 순서를 유지하여 만든 부분 수열
* Increasing Subsequence
  
    순증가하는 부분 수열
* LIS (Longest Increasing Subsequence)

    가장 긴 순증가 부분 수열<br>
    LIS의 길이를 구하는 문제와 실제 LIS 중 하나를 구하는 문제, 그리고 모든 LIS를 구하는 문제로 나뉨

### 방법

* using DP
* using BS(Binary Search (=lower_bound))

### 문제

* LIS의 길이를 구하는 문제

    * allow DP

        http://boj.kr/11053

    * only BS

        http://boj.kr/12015

* 실제 LIS 중 하나를 구하는 문제
    
    http://boj.kr/14002

<br><br>
# LIS의 길이를 구하는 문제

## using DP

### O(n^2)

### 알고리즘
    dp[x] 
    = x번이 마지막인 수열의 LIS 길이
    = 0 ~ x-1 번 원소를 돌면서 현재 값보다 낮은 원소의 dp값 중 최댓값 +1

<br>

## using Binary Search

### O(nlogn)

### 특징
* 이 방법으로 만든 LIS 배열은 실제 LIS가 아닐 가능성이 높다. 원 수열의 마지막 값이 매우 작은 값인 경우가 대표적인 예
* 이분탐색으로 찾는 과정에서 STL의 lower_bound를 사용하면 보다 간편해진다.

### 알고리즘
    1. 첫 원소를 LIS 배열에 담는다.
    2. 다음 원소를 LIS 배열의 마지막 원소와 비교한다.
       2-1. 마지막 원소보다 크면 LIS 배열에 '추가'한다.
       2-2. 작으면 LIS 배열에서 이분탐색으로 해당 원소를 찾는다. 원소가 없으면 해당 원소보다 큰 값중 가장 작은 값을 찾는다. 찾은 값을 해당 원소로 교체한다.
    3. 2를 원 수열의 끝까지 반복하면, LIS배열의 길이가 곧 LIS의 길이이다.


<details>
<summary>code</summary>

```c++
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
	ios::sync_with_stdio(false);
	int n, a;
	vector<int> v;
	cin >> n >> a;
	v.push_back(a);
	while (--n) {
		cin >> a;
		if (v.back() < a)
			v.push_back(a);
		else {
			auto it = lower_bound(v.begin(), v.end(), a);
			*it = a;
		}
	}
	cout << v.size();
}
```

</details>


<br><br>
# 실제 LIS 중 하나를 구하는 문제

### O(nlogn)

### 특징
* LIS중 '하나만' 구하는 방법. 모든 LIS를 구하는 방법이 아님

### 알고리즘
    'LIS의 길이를 구하는 문제'와 거의 유사함
    차이점은 LIS 배열에 해당 원소의 index를 추가하여 마지막에 LIS 배열 끝의 원소의 index를 시작으로 parent 0번 원소까지 추적하는 것

<details>
<summary>code</summary>

```c++
#include <vector>
#include <iostream>
#include <queue>
#include <algorithm>
using namespace std;

int n, a;

bool cmp(pair<int, int> a, pair<int, int> b) {
	return a.first < b.first;
}

int main() {
	ios::sync_with_stdio(false); cin.tie(NULL);
	vector<int> arr;
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> a;
		arr.push_back(a);
	}
	vector<pair<int, int> > v;
	vector<int> parent(n, 0);
	v.emplace_back(arr[0], 0);
	parent[0] = -1;
	for (int i = 1; i < n; i++) {
		if (arr[i] > v.back().first) {
			parent[i] = v.back().second;
			v.emplace_back(arr[i], i);
		}
		else {
			auto it = lower_bound(v.begin(), v.end(), make_pair(arr[i], 0), cmp);
			if (it->first == arr[i])
				continue;
			*it = make_pair(arr[i], i);
			if (it == v.begin())
				parent[i] = -1;
			else
				parent[i] = (--it)->second;
		}
	}

	cout << v.size() << '\n';

	vector<int> ans;
	int now = v.back().second;
	while (now != -1) {
		ans.push_back(arr[now]);
		now = parent[now];
	}
	for (int i = ans.size() - 1; i >= 0; i--)
		cout << ans[i] << ' ';
}
```

</details>

<br><br>
# 모든 LIS를 구하는 문제

### 알고리즘
    'LIS의 길이를 구하는 문제'와 유사하게 진행된다.
    우선 LIS 배열이 1차원이 아닌 2차원인데, 위 문제에서의 LIS배열은 곧 2차원 배열에서 각 행의 마지막 원소들로 이루어진 배열이다.
    즉, 이분탐색은 각 행의 마지막 원소를 대상으로 한다.

    하나의 원소는 원시 수열의 값과 해당 원소를 넣을 때 바로 윗 행의 원소의 개수가 된다.
    예를 들어, 원시 배열이 {2, 1, 3, 6, 4}이고 1까지 진행된 상태라면
    {2, 1}
    {}
    과 같은 형태가 될 것이고, 여기서 3을 넣을 땐 값 '3'과 바로 윗 행의 size인 2가 2번째 행에 추가된다.

    최종적으로 위 원시 배열은
    {2, 1}
    {3}
    {6, 4}
    와 같이 될 것이며, 여기서 모든 LIS를 뽑는 방법은 다음과 같다.

    1. 마지막 행에서 한 원소를 뽑는다.
    2. 해당 원소의 부모로 가능한 원소들을 DFS로 모두 찾아 출력한다.
    3. 1~2를 마지막 행의 모든 원소에 대해 반복한다.

    위 알고리즘을 거친 결과는 다음과 같을 것이다.

    {2,3,6}, {1,3,6}, {2,3,4}, {1,3,4}

    LIS의 길이는 행의 길이가 된다.

<details>
<summary>code</summary>

```c++

```

</details>